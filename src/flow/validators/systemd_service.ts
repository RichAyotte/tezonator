import Ajv from 'ajv'
import addFormats from 'ajv-formats'
import type { FromSchema, JSONSchema } from 'json-schema-to-ts'

const ajv = new Ajv({ allErrors: true, verbose: true })
addFormats(ajv)

export const systemd_service_schema = {
	$schema: 'http://json-schema.org/draft-07/schema#',
	type: 'object',
	properties: {
		Install: {
			type: 'object',
			properties: {
				Alias: { type: 'string' },
				Also: { type: 'string' },
				DefaultInstance: { type: 'string' },
				RequiredBy: { type: 'string' },
				UpheldBy: { type: 'string' },
				WantedBy: { type: 'string' },
			},
			required: ['WantedBy'],
			additionalProperties: false,
		},
		Service: {
			type: 'object',
			properties: {
				BusName: { type: 'string' },
				ExecCondition: { type: 'string' },
				ExecReload: { type: 'string' },
				ExecStart: { type: 'string' },
				ExecStartPost: { type: 'string' },
				ExecStartPre: { type: 'string' },
				ExecStop: { type: 'string' },
				ExecStopPost: { type: 'string' },
				ExitType: { type: 'string' },
				FileDescriptorStoreMax: { type: 'string' },
				FileDescriptorStorePreserve: { type: 'string' },
				GuessMainPID: { type: 'string' },
				NonBlocking: { type: 'string' },
				NotifyAccess: { type: 'string' },
				OOMPolicy: { type: 'string' },
				OpenFile: { type: 'string' },
				PIDFile: { type: 'string' },
				ReloadSignal: { type: 'string' },
				RemainAfterExit: { type: 'string' },
				Restart: { type: 'string' },
				RestartForceExitStatus: { type: 'string' },
				RestartMaxDelaySec: { type: 'string' },
				RestartMode: { type: 'string' },
				RestartPreventExitStatus: { type: 'string' },
				RestartSec: { type: 'string' },
				RestartSteps: { type: 'string' },
				RootDirectoryStartOnly: { type: 'string' },
				RuntimeMaxSec: { type: 'string' },
				RuntimeRandomizedExtraSec: { type: 'string' },
				Sockets: { type: 'string' },
				SuccessExitStatus: { type: 'string' },
				TimeoutAbortSec: { type: 'string' },
				TimeoutStartFailureMode: { type: 'string' },
				TimeoutStartSec: { type: 'string' },
				TimeoutStopFailureMode: { type: 'string' },
				TimeoutStopSec: { type: 'string' },
				USBFunctionDescriptors: { type: 'string' },
				USBFunctionStrings: { type: 'string' },
				WatchdogSec: { type: 'string' },
			},
			required: ['ExecStart'],
			additionalProperties: false,
		},
		Unit: {
			type: 'object',
			properties: {
				After: { type: 'string' },
				AllowIsolate: { type: 'string' },
				AssertACPower: { type: 'string' },
				AssertArchitecture: { type: 'string' },
				AssertCapability: { type: 'string' },
				AssertControlGroupController: { type: 'string' },
				AssertCPUFeature: { type: 'string' },
				AssertCPUPressure: { type: 'string' },
				AssertCPUs: { type: 'string' },
				AssertCredential: { type: 'string' },
				AssertDirectoryNotEmpty: { type: 'string' },
				AssertEnvironment: { type: 'string' },
				AssertFileIsExecutable: { type: 'string' },
				AssertFileNotEmpty: { type: 'string' },
				AssertFirstBoot: { type: 'string' },
				AssertGroup: { type: 'string' },
				AssertHost: { type: 'string' },
				AssertIOPressure: { type: 'string' },
				AssertKernelCommandLine: { type: 'string' },
				AssertKernelVersion: { type: 'string' },
				AssertMemory: { type: 'string' },
				AssertMemoryPressure: { type: 'string' },
				AssertNeedsUpdate: { type: 'string' },
				AssertOSRelease: { type: 'string' },
				AssertPathExists: { type: 'string' },
				AssertPathExistsGlob: { type: 'string' },
				AssertPathIsDirectory: { type: 'string' },
				AssertPathIsEncrypted: { type: 'string' },
				AssertPathIsMountPoint: { type: 'string' },
				AssertPathIsReadWrite: { type: 'string' },
				AssertPathIsSymbolicLink: { type: 'string' },
				AssertSecurity: { type: 'string' },
				AssertUser: { type: 'string' },
				AssertVirtualization: { type: 'string' },
				Before: { type: 'string' },
				BindsTo: { type: 'string' },
				CollectMode: { type: 'string' },
				ConditionACPower: { type: 'string' },
				ConditionArchitecture: { type: 'string' },
				ConditionCapability: { type: 'string' },
				ConditionControlGroupController: { type: 'string' },
				ConditionCPUFeature: { type: 'string' },
				ConditionCPUPressure: { type: 'string' },
				ConditionCPUs: { type: 'string' },
				ConditionCredential: { type: 'string' },
				ConditionDirectoryNotEmpty: { type: 'string' },
				ConditionEnvironment: { type: 'string' },
				ConditionFileIsExecutable: { type: 'string' },
				ConditionFileNotEmpty: { type: 'string' },
				ConditionFirmware: { type: 'string' },
				ConditionFirstBoot: { type: 'string' },
				ConditionGroup: { type: 'string' },
				ConditionHost: { type: 'string' },
				ConditionIOPressure: { type: 'string' },
				ConditionKernelCommandLine: { type: 'string' },
				ConditionKernelVersion: { type: 'string' },
				ConditionMemory: { type: 'string' },
				ConditionMemoryPressure: { type: 'string' },
				ConditionNeedsUpdate: { type: 'string' },
				ConditionOSRelease: { type: 'string' },
				ConditionPathExists: { type: 'string' },
				ConditionPathExistsGlob: { type: 'string' },
				ConditionPathIsDirectory: { type: 'string' },
				ConditionPathIsEncrypted: { type: 'string' },
				ConditionPathIsMountPoint: { type: 'string' },
				ConditionPathIsReadWrite: { type: 'string' },
				ConditionPathIsSymbolicLink: { type: 'string' },
				ConditionSecurity: { type: 'string' },
				ConditionUser: { type: 'string' },
				ConditionVirtualization: { type: 'string' },
				Conflicts: { type: 'string' },
				DefaultDependencies: { type: 'string' },
				Description: { type: 'string' },
				Documentation: { type: 'string' },
				FailureAction: { type: 'string' },
				FailureActionExitStatus: { type: 'string' },
				IgnoreOnIsolate: { type: 'string' },
				JobRunningTimeoutSec: { type: 'string' },
				JobTimeoutAction: { type: 'string' },
				JobTimeoutRebootArgument: { type: 'string' },
				JobTimeoutSec: { type: 'string' },
				JoinsNamespaceOf: { type: 'string' },
				OnFailure: { type: 'string' },
				OnFailureJobMode: { type: 'string' },
				OnSuccess: { type: 'string' },
				OnSuccessJobMode: { type: 'string' },
				PartOf: { type: 'string' },
				PropagatesReloadTo: { type: 'string' },
				PropagatesStopTo: { type: 'string' },
				RebootArgument: { type: 'string' },
				RefuseManualStart: { type: 'string' },
				RefuseManualStop: { type: 'string' },
				ReloadPropagatedFrom: { type: 'string' },
				Requires: { type: 'string' },
				RequiresMountsFor: { type: 'string' },
				Requisite: { type: 'string' },
				SourcePath: { type: 'string' },
				StartLimitAction: { type: 'string' },
				StartLimitBurst: { type: 'string' },
				StartLimitIntervalSec: { type: 'string' },
				StopPropagatedFrom: { type: 'string' },
				StopWhenUnneeded: { type: 'string' },
				SuccessAction: { type: 'string' },
				SuccessActionExitStatus: { type: 'string' },
				SurviveFinalKillSignal: { type: 'string' },
				Upholds: { type: 'string' },
				Wants: { type: 'string' },
			},
			required: ['Description', 'Documentation'],
			additionalProperties: false,
		},
	},
	required: ['Install', 'Service', 'Unit'],
	additionalProperties: false,
} as const satisfies JSONSchema

export type SystemdService = FromSchema<typeof systemd_service_schema>
export const validate_systemd_service = ajv.compile<SystemdService>(
	systemd_service_schema,
)
